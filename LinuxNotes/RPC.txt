RPC (Remote Procedure Calls)
============================

Objective
---------
An introduction to RPC programming as per
RFC 1831, 1832, 1833.



Brief Intro
-----------
Both socket programming and RPC are used to create 
Distributed Applications.

Socket Programming is very low level network programming but 
more flexible because it can connect with any server.

RPC can only connect to those servers which runs the portmap
service also known asn "sunrpc" which listens on port 111 

Socket Programming uses message passing between client
and server. RPC, on the other hand, uses a higher
level abstraction where the portmapper takes care of
the socket communication via XDR language whilst the
RPC abstraction layer takes care of the application.
XDR stands for External Data Representation.


In other words, RPC do nothing more than hide the implementation
details of creating sockets, sending data and closing the sockets
as required. They are also responsible for converting the (remote)
procedure's (local data) parameters into a format suitable for
network transportation and again into a format that can be used on 
the remote host. This network-transparent transmission of data
ensures both end machines can interpret the information content
correctly.

Portmapper
----------
The server needs to run sunrpc portmapper.
Starting, stopping, restarting portmapper:

	/etc/rc.d/init.d/portmap start|stop|restart





Architecture
------------
This example is modified from LJ Staff's post of Ed Petron's excellent
RPC tutorial in www.linuxjournal.com.

We will create a system which can input numbers, calculate the average
and return the result to the client.  The server will calculate the average.

The architecture is shown in Fig A below;



	Client					     Server
          | 					        |
	  |				                |
         XDR -- sunrpc <-------------------> sunrpc -- XDR



		Fig A.  RPC Client Server communication
         	---------------------------------------



The code
--------

The function which defines procedure of  calculating the
averages of the numbers, is called the "procedure".
For our case, the procedure is defined in  avg.x:


 
[ avg.x ]
/*
 * The average procedure receives an array of real
 * numbers and returns the average of their
 * values. It  handles a maximum of
 * 200 numbers.
 */
const MAXAVGSIZE  = 200;

struct input_data {
  double input_data<200>;
};

typedef struct input_data input_data;

program AVERAGEPROG {
    version AVERAGEVERS {
        double AVERAGE(input_data) = 1;
    } = 1;
} = 22855;

snip..................................................


Note that procedure files are saved with a .x extension.
Then generate the client and server stub programs:


	rpcgen avg.x


You will get 3 files:

	avg_clnt.c -> the stub program for the client process 
	avg_svc.c -> the stub program for the server process
	avg_xdr.c -> the XDR routines used by both the client
	             and server

 
Later you will need to compile all the above 3 files with the
client and server source code to get the client and server
executables.


The server code, called "avg_proc.c":


[ avg_proc.c ]

// The server part
#include <rpc/rpc.h>
#include "avg.h"
#include <stdio.h>

static double sum_avg;

double * average_1(input_data *input,
	CLIENT *client) {

  double *dp = input->input_data.input_data_val;
  u_int i;
  sum_avg = 0;
  for(i=1;i<=input->input_data.input_data_len;i++) {
    sum_avg = sum_avg + *dp; dp++;
  }
  sum_avg = sum_avg /
	input->input_data.input_data_len;
  return(&sum_avg);
}

double * average_1_svc(input_data *input,
	struct svc_req *svc) {
  CLIENT *client;
  return(average_1(input,client));
}

snip............................................................




Then, the client part called "ravg.c" :

[ ravg.c ]
//The client part
#include "avg.h"
#include <stdlib.h>

void
averageprog_1( char* host, int argc, char *argv[])
{
   CLIENT *clnt;
   double  *result_1, *dp, f;
      char *endptr;
      int i;
   input_data  average_1_arg;
     average_1_arg.input_data.input_data_val =
     (double*) malloc(MAXAVGSIZE*sizeof(double));
     dp = average_1_arg.input_data.input_data_val;
     average_1_arg.input_data.input_data_len =
         argc - 2;
      for (i=1;i<=(argc - 2);i++) {
        f = strtod(argv[i+1],&endptr);
        printf("value   = %e\n",f);
        *dp = f;
        dp++;
      }
   clnt = clnt_create(host, AVERAGEPROG,
	AVERAGEVERS, "udp");
   if (clnt == NULL) {
      clnt_pcreateerror(host);
      exit(1);
   }
   result_1 = average_1(&average_1_arg, clnt);
   if (result_1 == NULL) {
      clnt_perror(clnt, "call failed:");
   }
   clnt_destroy( clnt );
      printf("average = %e\n",*result_1);
}


main( int argc, char* argv[] )
{
   char *host;

   if(argc < 3) {
     printf(
      "usage: %s server_host value ...\n",
      argv[0]);
      exit(1);
   }
        if(argc > MAXAVGSIZE + 2) {
          printf("Two many input values\n");
          exit(2);
        }
   host = argv[1];
   averageprog_1( host, argc, argv);
}

snip.....................................................


The Makefile for compiling the client and the server:


[ Makefile ]

BIN =  ravg avg_svc
GEN = avg_clnt.c avg_svc.c avg_xdr.c avg.h
RPCCOM = rpcgen

all: $(BIN)

ravg: ravg.o avg_clnt.o avg_xdr.o
	$(CC) -o $@ ravg.o avg_clnt.o avg_xdr.o

ravg.o: ravg.c avg.h
	$(CC) -g ravg.c -c

avg_svc: avg_proc.o avg_svc.o avg_xdr.o
	$(CC) -o $@ avg_proc.o avg_svc.o avg_xdr.o

avg_proc.o: avg_proc.c avg.h

$(GEN): avg.x
	$(RPCCOM) avg.x

clean cleanup:
	rm -f $(GEN) *.o $(BIN)

snip...................................................



Edit /etc/rpc to add this:


	avg  22855


where 22855 is the program number for the avg procedure
as defined in avg.x


To run the server:


	./avg_svc &


Check to see if it is running:

	rpcinfo -p

To connect to the server:


	./ravg 192.168.0.1 23 45 11 34

where 23, 45,11 and 34 are the numbers to be averaged.
Alternatively,

	

	./ravg linux.society.intipen.edu.my  23 45 11 34

