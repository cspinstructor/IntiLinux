CGI (Common Gateway Interface)
===============================

Objective
---------
To write shell scripts to parse forms submitted by
Web-browsers to query or update MySQL database.


Prerequisites
-------------
[1] httpd must be running.
[2] public_html folder created in user's home directory.
[3] cgi-bin directory created in public_html and cgi-wrap
    program installed.
[3] MySQL database must be running and a database created
    and populated with at least 1 table with records.

All of the above [1] - [3] has been discussed in other 
chapters.

This chapter will focus only on the actual scripting using
the bash shell.


Architecture
------------
The architecture is shown in Fig.A below:


Client 		  WebServer	    MySQL 
Web-browser <---> [awak.html] <---> Server
                  [query.cgi] 
	          [update.cgi]

	Fig.A  Architecture of CGI  
	--------------------------

The WebServer (Apache) and MySQL are both running on the same
machine. On the WebServer, the directory structure is as
follows:

	/home/paul/public_html/ -- awak.html
			|
			|
		    cgi-bin/    -- query.cgi
				-- update.cgi

awak.html is the main webpage containing the form which
looks as follows:

	ID:	____
	Name:	_____________________
	Course: ___________
	Start:	____________

	[SEARCH]  [UPDATE]
	

where there are 4 textboxes and 2 buttons.


The cgi-bin directory contains 2 shell scripts, ie, query.cgi
and update.cgi.

When the SEARCH button is clicked, the method GET sends the
form parameters to query.cgi.

When the UPDATE button is clicked, the method GET sends the
form parameters to update.cgi.	


awak.html
---------
The html code for this form is:

snip.................................................
	
<html><head><title>MySQL</title></head><body> 


<script language=javascript>
function ChooseAction(target) {
	if(target==0) document.myform.action="cgi-bin/query.cgi";	
	if(target==1) document.myform.action="cgi-bin/update.cgi";	
}
</script>

<form method=GET name=myform action="">
ID: <input type=text name=id>
<br>Name: <input type=text name=eman>
<br>Course: <input type=text name=course>
<br>Start:<input type=text name=dstart>
<br><input type=submit value="SEARCH" onClick=ChooseAction(0)>
<input type=submit value="UPDATE" onClick=ChooseAction(1)>
</form>

</body></html>

snip.............................................................



query.cgi
---------
The shell script is shown below:

snip........................................................


#!/bin/sh
# query.cgi - called from awak.html
# 2 awak.html, first is static, the other is generated
# by awak.sh so that the result of the SUBMIT button can be
# set in the textboxes returned via textboxes generated by
# awak.cgi 
echo $QUERY_STRING > tmp.txt

# extract the name to be searched and save it in variable "name"
#extract name based on & separator, delete eman=, substitute + with space
awk  -F "&" '{ print $2 }' tmp.txt | tr -d 'eman=' | tr '+' -s ' '  > out.txt 
name=`cat out.txt`

# Construct the SQL query using .sql script
echo 'use stu' > test.sql
echo -n 'select * from student where name like "' >> test.sql
echo -n $name >> test.sql
echo '%";' >> test.sql
#echo quit >> test.sql

# search for the name in "stu" database and save result to result.txt
./sql.sh > result.txt


# Check result of query and send appropriate reply to User
if grep -c [0-9] result.txt > /dev/null
then
	./awak.sh #extract 1st record of result, send to User
else
	echo Content-type: text/plain
	echo
	echo "Record Not Found Please click back button of browser"
fi

snip..............................................................




update.cgi
----------
The script is shown below:

snip............................................................


#!/bin/sh
# update.cgi - called from awak.html

echo $QUERY_STRING > tmp.txt

#comment this out:
#awk  -F "&" '{ print $2 }' tmp.txt | tr -d 'eman=' | tr '+' -s ' '  > out.txt 
# extract the num 
#num=`awk  -F "&" '{ print $1 }' tmp.txt | tr 'id=' -s ' '` 
num=`awk  -F "&" '{ print $1 }' tmp.txt | tr -d 'id='` 

# extract the name 
#name=`awk  -F "&" '{ print $2 }' tmp.txt | tr 'eman=+' -s ' '` 
name=`awk  -F "&" '{ print $2 }' tmp.txt | tr -d 'eman=' | tr '+' -s ' '` 

# extract the course 
#course=`awk  -F "&" '{ print $3 }' tmp.txt | tr 'id=eman=+course=' -s ' '` 
course=`awk  -F "&" '{ print $3 }' tmp.txt | tr -d 'course='` 

# extract the start (date start) 
start=`awk  -F "&" '{ print $4 }' tmp.txt | tr -d 'dstart='` 

# The mandatory 2 line reply to web submitted forms
echo Content-type: text/plain
echo

# Construct the SQL query using .sql script
# update student set num=123456, name="BILL GATES", course="PHY" 
# start="2002-12-25" where name="BILL CLINTON";
echo 'use stu' > test.sql
echo update student set num=$num,name=\"$name\", \
     course=\"$course\",start=\"$start\" where name=\"$name\"\; >> test.sql
echo quit >> test.sql

# search for the name in "stu" database and save result to result.txt
./sql.sh > result.txt


# Check result of query and send appropriate reply to User
if grep -c [0-9] result.txt > /dev/null
then
	echo Nothing to do lah
else
	echo "Record Updated. Please click back button of browser"
fi


snip.................................................................




sql.sh
------
Notice that both query.cgi and update.cgi will call another shell
script "sql.sh".

This script is shown below:

snip...............................................................


#!/bin/sh
echo Content-type:text/plain
echo
mysql -u paul -pmypassword < test.sql 

snip.............................................................



test.sql
--------
This file is dynamically created by the query.cgi and update.cgi
scripts and its contents are always different. A snapshot of
this file:


	use stu
	select * from student where name like "J%";


when modified by search.cgi, or:


	use stu
	update student set num=888888,name="JACKSON GAN ENG KONG",
 		course="WORDY",start="2002-12-12" 
 		where name="JACKSON GAN ENG KONG";
	quit


when modified by update.cgi


MySQL Database
--------------
For this chapter, the database used is "stu" and the table inside
this database is called "student".

The data definition which can be viewed with the command
"MySQL>describe student;" is as follows:


	Field	Type		Null	
	-----------------------------
	num	int(11)		YES		
	name	varchar(64)	YES		
	course	varchar(16)	YES		
	start	date		YES		


An example of records:

	100	BILL GATES	WORDS	2000-12-25
	200	BILL CLINTON	EXCEL	2000-12-26

Two common queries made on the database:


	select * from student where name like "J%";

	update student set num=200,name="BILL GATES",
 		course="WORDY",start="2002-12-12" 
 		where name="BILL GATES";



Data path
---------

Fig B. below shows the data path taken by clicking on
the SEARCH button on the form awak.html:


	CLIENT              SERVER
	-------   GET ...   ------
	awak.html -----> query.cgi ---> sql.sh
   	 [SEARCH]		   ---> awak.sh
			result		  |
   	  	   <----------------------|

        	Fig B. Client requests query
		-----------------------------



Fig C. below shows the data path taken by clicking on
the UPDATE button on the form awak.html:



	CLIENT              SERVER
	-------   GET ...   ------
	awak.html -----> update.cgi ---> sql.sh
	[UPDATE]			  |
			 feedback	  |
   	  	   <----------------------|

        	Fig C. Client requests update
		-----------------------------




awak.sh
-------
This script is as shown below:

.............................................................

#!/bin/sh

# extract only the first record
sed 1,3d result.txt > tmp    # cut the first 3 lines
head -n 1 < tmp >result.txt   # extract the first line

echo Content-type: text/html
echo
echo '<html><head><title>MySQL</title></head><body>' 

echo '<script language=javascript>
	function ChooseAction(target) {
	if(target==0) document.myform.action="query.cgi";	
	if(target==1) document.myform.action="update.cgi";	
	}
	</script>'

echo '<form method=GET name=myform action="">'

echo -n 'ID: <input type=text name=id value="' 
awk  -F "\t" '{print $1 "\">" }' result.txt 

echo -n '<br>Name: <input type=text name=eman value="' 
awk  -F "\t" '{print $2 "\">" }' result.txt 

echo -n '<br>Course: <input type=text name=course value="' 
awk  -F "\t" '{print $3 "\">" }' result.txt 

echo -n '<br>Start: <input type=text name=dstart value="'
awk  -F "\t" '{print $4 "\">" }' result.txt 


echo '<br><input type=submit value="SEARCH" onClick=ChooseAction(0)>
	<input type=submit value="UPDATE" onClick=ChooseAction(1)>
	</form>
	</body></html>'


....................................................................