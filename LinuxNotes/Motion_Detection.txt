MOTION DETECTION
================

Objective
---------
A system that detects motion and triggers an alarm.


Requirements
------------
1.  An infra red remote control mouse receiver connected 
    to a serial port ttyS0 and symbolically linked as /dev/mouse,
    and a transmitter.

2.  An alarm system activated by ejecting the CD-ROM, eg, 
    a magnetic proximity alarm. See chapter on WebCam.txt.


Architecture
------------
The architecture is as shown in Fig A below.



   Server --- Mouse		 Mouse
     |       Receiver         Transmitter      
     |
   Alarm
   System


   Fig A.  Wireless Motion Detection with Alarm
   ---------------------------------------------   

Referring to Fig A above, the Mouse Transmitter is placed
at about 5 metres away and aimed at the Mouse Receiver.
The Alarm System is described fully in the chapter on WebCam.txt.

The Mouse Transmitter has 2 buttons, ie, Left and Right, 
representing the left and right mouse buttons respectively.
The Left button is pressed and taped down, so that the Mouse
Transmitter is always transmitting the down mouse event to the
Mouse Receiver.  You can see this event by login as root and
doing this command:

	cat /dev/mouse
	
which will generate a series of ` and @ meaning downmouse and
upmouse respectively.  The trick is therefore to capture these
characters and trigger the alarm by ejecting the CD-ROM.

Now, the Transmitter is always aiming at the Receiver. When the
path is blocked, this character " ` " (backquote) is generated 
and when the path becomes unblocked, this character " @ " is
generated.  You may get different characters for your system.
So do cat /dev/mouse and left-click down and up to find what
characters your system generates


The Scripts
-----------
The script to capture the characters and trigger the alarm is
as follows:

[DevMouse.sh]
............................................................
#!/bin/sh
# Read directly from /dev/mouse
# instead of using mev - which only works for local logins
# A program to execute a task when a left click occurs
# - Paul Chin  Dec 21, 2002

cat /dev/mouse > mouse_events.txt &

while [ 0 ]
do
	if grep \`  mouse_events.txt
	then
		#Insert your task here
		echo -e "\` Detected -> Alarm! \a"
		/usr/bin/eject
	fi
	
	if grep @ mouse_events.txt
	then
		#Insert your task here
		echo -e "@ Detected -> Alarm! \a"
		/usr/bin/eject
	fi

	cat /dev/null > mouse_events.txt
	sleep 1 
done
.........................................................

Note that you need to use the escape character with " ` ",
because it is a special character for bash.  Substitute it
and also @ with the characters that your system generates.

Your script must be run as root because only root can cat
/dev/mouse. But you probably could setuid by chmod 4755 if 
you like.




Start and Stop Scripts
----------------------
In order to make it useful you need to start the DevMouse.sh
script after you have closed and locked the door, assuming
you are using the motion detection system to monitor the door.
The following script, called StartMouse.sh solves this problem:


[StartMouse.sh]
.......................................................
 
#!/bin/sh

# Give yourself enough time to close the door and lock it.
sleep 30

# Start the DevMouse.sh security monitor as a background NOHUP
# so that even if you logout, the process won't die
/home/paul/HomeSecurity/DevMouse.sh -NOHUP &
............................................................



So you login from a terminal, probably a win9x/ME terminal using
putty, su  to root and do the following command:

	StartMouse.sh -NOHUP &

Logout, close the door and lock it. After 30 seconds StarMouse.sh
will start DevMouse.sh, and the system will monitor the door.


When you get back, after opening the door, the mouse will trigger
the DevMouse.sh script and the DevMouse.sh will give you 30 seconds
to unlock the door and run the StopMouse.sh script.

The StopMouse.sh script is shown below:


[StopMouse.sh]
....................................................
#!/bin/sh
# To cleanup after the DevMouse.sh security monitor is
# triggered

killall DevMouse.sh
killall cat
cat /dev/null > mouse_events.txt
.......................................................

The StopMouse.sh script is necessary in order to stop all 
child processes generated by DevMouse.sh, else you might
have zombie concurrent processes of cat running. 


The modified DevMouse.sh is now shown below, with the 
30 seconds delay trigger:


[DevMouse.sh - modified]
.........................................................
#!/bin/sh
# Modifed DevMouse.sh so that it will give you a leeway
# of 30 seconds to unlock the door 

cat /dev/mouse > mouse_events.txt &

while [ 0 ]
do
	if grep \`  mouse_events.txt
	then
		#Insert your task here
		echo -e "\` Detected -> Alarm in 30 secs! \a"
		#give yourself enough time to deactivate
		sleep 30  
		/usr/bin/eject
	fi
	
	if grep @ mouse_events.txt
	then
		#Insert your task here
		echo -e "@ Detected -> Alarm in 30 secs! \a"
		#give yourself enough time to deactivate
		sleep 30  
		/usr/bin/eject
	fi

	cat /dev/null > mouse_events.txt
	sleep 5 
done
..................................................................




Call Handphone on Trigger
-------------------------
Additionally, you could also call your handphone upon the door
being opened, the modified script is as below;


[DevMouse.sh - modified to add call handphone]
.........................................................
#!/bin/sh
# Modifed DevMouse.sh so that it will give you a leeway
# of 30 seconds to unlock the door 

cat /dev/mouse > mouse_events.txt &

while [ 0 ]
do
	if grep \`  mouse_events.txt
	then
		#Insert your task here
		echo -e "\` Detected -> Alarm in 30 secs! \a"
		#give yourself enough time to deactivate
		sleep 30  
		/usr/bin/eject
		CallDaddy.sh
	fi
	
	if grep @ mouse_events.txt
	then
		#Insert your task here
		echo -e "@ Detected -> Alarm in 30 secs! \a"
		#give yourself enough time to deactivate
		sleep 30  
		/usr/bin/eject
		CallDaddy.sh
	fi

	cat /dev/null > mouse_events.txt
	sleep 5 
done
..................................................................


The CallDaddy.sh script is explained in detail in the chapter
Handphone_Dialer.txt.

