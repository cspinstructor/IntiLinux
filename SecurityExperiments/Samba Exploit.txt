Samba Exploit
~~~~~~~~~~~~~

Vulnerability
-------------
http://cve.mitre.org:
CAN-2003-0201
Buffer overflow in the call_trans2open function in trans2.c for
Samba 2.2.x before 2.2.8a,2.0.10 and earlier 2.0.x versions, and
Samba-TNG before 0.3.2, allows remote attackers to execute 
arbitrary code.

https://rhn.redhat.com/errata/RHSA-2003-137.html:
New samba pacakges fix security vulnerability.
An anonymous user could exploit the vulnerability to gain root access 
on the target machine.


Attack Program
--------------
sambal.c

by eSDee from
http://www.netric.org
released on 10 April, 2003

---------------------------------------------
		2003 June 
---------------------------------------------

	Attacking machine				victim
 	    			Internet
			----------------------------->


compile is_excluded.c on victim machine:

	cc is_exluded.c -o excluded

Run eggbrk_v2.sh & on victim machine:

as root:  ./eggbrk_v2.sh &


The, attack from Attacking machine:

	./sambal -b0 219.95.11.11

-b0 means Linux

	It will spawn bindshell on port 45295 which is killed within 1 sec
by eggbrk_v2.sh.  The kill is logged to eggbrk.log.  Eg:


1	Sun Jun  1 19:25:39 MYT 2003
	broke shell: 22760
	
2	Sun Jun  1 19:25:42 MYT 2003
	broke shell: 22881

3	Sun Jun  1 19:26:30 MYT 2003
	broke shell: 24848

4	Sun Jun  1 19:26:49 MYT 2003
	broke shell: 25610

5	Sun Jun  1 19:31:41 MYT 2003
	broke shell: 5590

6	Sun Jun  1 19:31:43 MYT 2003
	broke shell: 5643


sambal breaks into victim by  overflowing smb's stack via the
trans2open vulnerability and opened a shell on port 45295.  Within 1,
second it was killed, gets logged as [1]  and I get this message:

	Connection lost


But port 45295 (the bindshell port) was till up and listening. Whoever
telnets to this port, gets instant rootshell. So, I tried:

	telnet 219.95.11.11 45295

I get a shell and immediately a message:


	Connection closed by foreign host


Using python smb_exp2 exploit to attack, I get:

*** Connection closed by remote host ***


after successfully getting a shell, by bruteforcing several retaddr.
The python exploit does not open a separate portshell, it uses port 139.


For further details, see Owned.txt chapter


Rootkit not installed
---------------------
ls -lh indicates that no rootkits were installed.
The 1 second interval is not enough for anyone
to install rootkits.


Overheads
---------

top shows:

PID    ...  USER   %CPU   %MEM COMMAND
12223  	    root   1.1    1.1  bash


The eggbrk_v2.sh was set to scan for shells every 1 second.




Longitudinal testing
--------------------
Started eggbrk_v2.sh  pid 30462 on 219.95.12.13 as follows:

	./eggbrk_v2.sh -NOHUP &

on June 1, 2003 (Sunday) at 8.45pm

On June 2, 2003 (Monday) at 11:45pm
I checked 219.95.12.13 and found that eggbrk_v2.sh was still
running at around 1.3 % CPU resources.

I attacked with sambal and eggbrk_v2 successfully kicked me out.
I telnetted to the 45295 bindshell port and also got kicked out.
eggbrk_v2 is working admirably well.


Testing eggbrk_v3.c
--------------------
uploaded to 219.95.12.13 on June 2, 2003 (Mon) at 11.45 pm.
attacked with sambal, then ps -ax, found the bof spawned shell
running as /bin//sh, but 

cat /proc/<pidnum>/status shows it to run under the name of:

sh

This confirms that the type of shell enumerated in the function
shell() is correct.


v3 is completely written in C and on Intel Celeron 500MHz, it takes up
about 0.5 to 1.1 % CPU resources, an amazing improvement in performance
compared with v2's shell script implementation.


At around 11.59, i started eggbrk_v2.
started as pid 15406:

	./eggbrk -NOHUP & 



Server died later, but not attributed to the eggbrk program.

On June 10, 10.45 pm., I logged into 219.95.0.122, started 
 
	./eggbrk -NOHUP & 

again.





-----------------------------------
	2003 Sept 07 2055
-----------------------------------

Lab Setup
---------

192.168.0.2       192.168.0.1
Hacker <--------> Firewall <------->   Internet
		     ^
		     |
		     |
		     V
		  Victim	
		 192.168.0.6 

  Fig A. Network Topology for Security Research
  ---------------------------------------------

Hardware:

Hacker
Celeron 500 MHz
256MB RAM
Install with full GUI
OS: Linux RedHat 9

Victim
Pentium 133 MH
64MB RAM
Install Servers only
OS: Linux RedHat 8	


Firewall
Celeron 333 MHz
256MB RAM	
Install firewall programs only
- iptables
OS: Linux RedHat 8


The Firewall is connected to the Internet via an ADSL
modem.


Hacker will run exploits targetting Victim, for remote
buffer exploits.  For local exploits, Hacker will login
to Victim and run the exploits locally.


Methodology
-----------
Install tripwire on  Hacker and Victim so that we can check
for rootkits and other modifications to system. Also install
chkrootkits.

Download exploits from Internet and try them against Victim. Do
analysis and diagnosis of intrusion after each attack.
Especially check the characteristics of the shell and the ports.

Then, if necessary, modify Eggbreaker to capture the characteristics
of the shell. Then, sanitize Victim, by using tripwire to check
for alterations and replace all trojanized binaries. Since Firewall
is clean, use its binaries to replace Victims'.

Then run Eggbreaker on Victim and repeat the attack. Check for
efficiency and document it.



Signs of infection
------------------

The sambal exploit program exploits the vulnerability in
the function trans2open in the smb program .

Once the victim has been compromised, the exploit installs
various programs and backdoors and rootkits.


Below are the typical symptoms
------------------------------

ls -lh returns error

showtee rootkit infection:
 
3 eggdrop
3 bnc
3 psyBNC
3 sh-fORCE
3 SH-fORCE
3 synscan
3 setup
3 in.inetd
3 tk
3 xntps
/usr/include


rootkit runs backdoor:
/usr/sbin/xntps -q on port 50000




[ netstat -tan ]
Note:
Notice the bindshell on port 45295

Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address  State      
tcp        0      0 219.95.3.8:53           0.0.0.0:*        LISTEN      
tcp        0      0 192.168.3.245:53        0.0.0.0:*        LISTEN      
tcp        0      0 127.0.0.1:53            0.0.0.0:*        LISTEN      
tcp        0      0 0.0.0.0:22              0.0.0.0:*        LISTEN      
tcp        0      0 0.0.0.0:23              0.0.0.0:*        LISTEN      
tcp        0      0 127.0.0.1:953           0.0.0.0:*        LISTEN      
tcp        0      0 0.0.0.0:6010            0.0.0.0:*        LISTEN      
tcp     1900      0 219.95.3.8:139          219.95.14.237:38023  CLOSE_WAIT  
tcp       26      0 219.95.3.8:45295        217.160.176.85:55810 CLOSE_WAIT  
tcp        0     48 219.95.3.8:22           202.186.197.169:1698 ESTABLISHED 



[ ps -ax ]
Note: 
pid 14251 is bof-spawned shell.
bof-spawned shells do not have environment variables because
they run off the stack.  
cat /proc/14251/environ will turn out blank
For a possible countermeasure, see chapter Eggbreaker.txt

  PID TTY      STAT   TIME COMMAND
    1 ?        S      0:04 init [3] 
    2 ?        SW     0:00 [keventd]
    3 ?        SW     0:00 [kapm-idled]
    4 ?        SWN    0:00 [ksoftirqd_CPU0]
    5 ?        SW     0:00 [kswapd]
    6 ?        SW     0:00 [kreclaimd]
    7 ?        SW     0:00 [bdflush]
    8 ?        SW     0:00 [kupdated]
    9 ?        SW<    0:00 [mdrecoveryd]
   80 ?        SW     0:00 [khubd]
  533 ?        SW     0:00 [eth0]
  694 ?        S      0:00 syslogd -m 0
  699 ?        S      0:00 klogd -2
  809 ?        S      0:00 named -u named
  811 ?        S      0:00 named -u named
  812 ?        S      0:03 named -u named
  813 ?        S      0:00 named -u named
  814 ?        S      0:00 named -u named
  835 ?        S      0:00 /usr/sbin/sshd
  868 ?        S      0:00 xinetd -stayalive -reuse -pidfile /var/run/xinetd.pid
  886 ?        S      0:00 /usr/sbin/dhcpd eth0
  904 ?        S      0:00 gpm -t ps/2 -m /dev/mouse
  922 ?        S      0:00 crond
  992 ?        S      0:00 xfs -droppriv -daemon
 1028 ?        S      0:00 /usr/sbin/atd
 1058 ?        S      0:00 /bin/sh /usr/sbin/adsl-connect /etc/ppp/rp-pppoe-gui/
 1130 tty2     S      0:00 /sbin/mingetty tty2
 1131 tty3     S      0:00 /sbin/mingetty tty3
 1132 tty4     S      0:00 /sbin/mingetty tty4
 1133 tty5     S      0:00 /sbin/mingetty tty5
 1134 tty6     S      0:00 /sbin/mingetty tty6
 1443 tty1     S      0:00 /sbin/mingetty tty1
12142 ?        S      0:00 /usr/sbin/pppd pty /usr/sbin/pppoe -p /var/run/adsl
12143 ?        S      0:12 /usr/sbin/pppoe -p /var/run/adsl.pid.pppoe -I
14055 ?        S      0:00 /usr/sbin/sshd
14057 pts/1    S      0:00 -bash
14123 pts/1    S      0:00 su -
14142 pts/1    S      0:00 -bash
14210 ?        S      0:00 smbd -D
14215 ?        S      0:00 nmbd -D
14221 ?        S      0:00 
1Û1É³?±?°0Í?1À1ÛPPW?á³?°fÍ??Æ1À1Û°?Í?9Ãu@1À?û°?Í?1À1É
14251 ?        S      0:00 /bin//sh
14270 pts/1    R      0:00 ps -ax



Eggbreaker tests
----------------
Eggbreaker successfully defends against sambal.
See above.


